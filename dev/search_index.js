var documenterSearchIndex = {"docs":
[{"location":"#InterpolatedPDFs.jl-1","page":"InterpolatedPDFs.jl","title":"InterpolatedPDFs.jl","text":"","category":"section"},{"location":"#","page":"InterpolatedPDFs.jl","title":"InterpolatedPDFs.jl","text":"Modules = [InterpolatedPDFs]\nOrder = [:function, :type]","category":"page"},{"location":"#InterpolatedPDFs.fit_cpl-Union{Tuple{YT}, Tuple{XT}, Tuple{AbstractArray{XT,1},AbstractArray{YT,1}}} where YT<:Real where XT<:Real","page":"InterpolatedPDFs.jl","title":"InterpolatedPDFs.fit_cpl","text":"fit_cpl(x::AbstractArray, s::AbstractArray)\n\nFits a LinearInterpolatedPDF distribution to s using x for the breakpoints.\n\nExamples\n\njulia> x = range(0, stop=pi, length=5);\n\njulia> s = acos.(rand(100));\n\njulia> d = fit_cpl(x,s)\nLinearInterpolatedPDF{Float64,1}(\npdf_itp: 5-element extrapolate(scale(interpolate(::Array{Float64,1}, BSpline(Linear())), (0.0:0.39269908169872414:1.5707963267948966,)), Throw()) with element type Float64:\n 0.15242714502015237\n 0.36726001464827923\n 0.7290336549033926\n 0.8405744820809898\n 1.0667947306551753\ncdf_itp: 5-element extrapolate(scale(interpolate(::Array{Float64,1}, BSpline(Linear())), (0.0:0.39269908169872414:1.5707963267948966,)), Throw()) with element type Float64:\n 0.0\n 0.10204033518620566\n 0.31729709383873866\n 0.6254889308490448\n 1.0\ninvcdf_itp: 5-element extrapolate(interpolate((::Array{Float64,1},), ::Array{Float64,1}, Gridded(Linear())), Throw()) with element type Float64:\n 0.0\n 0.39269908169872414\n 0.7853981633974483\n 1.1780972450961724\n 1.5707963267948966\n)\n\n\n\n\n\n","category":"method"},{"location":"#InterpolatedPDFs.LinearInterpolatedPDF","page":"InterpolatedPDFs.jl","title":"InterpolatedPDFs.LinearInterpolatedPDF","text":"LinearInterpolatedPDF{T,N,ITP,IT} <: ContinuousUnivariateDistribution\n\nA continuous univariate linearly interpolated distribution. The pdf, cdf, and inverse cdf are interpolated. Using this construction directly requires the input to be normalized.\n\nSee also: fit_cpl\n\nExamples\n\njulia> x,y = [1.0, 2.0, 3.0], [0.75, 0.5, 0.25]\n([1.0, 2.0, 3.0], [0.75, 0.5, 0.25])\n\njulia> LinearInterpolatedPDF(x,y)\nLinearInterpolatedPDF{Float64,1,Interpolations.GriddedInterpolation{Float64,1,Float64,Interpolations.Gridded{Interpolations.Linear},Tuple{Array{Float64,1}}},Interpolations.Gridded{Interpolations.Linear}}(\npdf_itp: 3-element extrapolate(interpolate((::Array{Float64,1},), ::Array{Float64,1}, Gridded(Interpolations.Linear())), Throw()) with element type Float64:\n 0.75\n 0.5\n 0.25\ncdf_itp: 3-element extrapolate(interpolate((::Array{Float64,1},), ::Array{Float64,1}, Gridded(Interpolations.Linear())), Throw()) with element type Float64:\n 0.0\n 0.625\n 1.0\ninvcdf_itp: 3-element extrapolate(interpolate((::Array{Float64,1},), ::Array{Float64,1}, Gridded(Interpolations.Linear())), Throw()) with element type Float64:\n 1.0\n 2.0\n 3.0\n)\n\njulia> pdf(d,1.5)\n0.625\n\njulia> cdf(d,2.5)\n0.8125\n\njulia> quantile(d,0.5)\n1.8\n\n\n\n\n\n","category":"type"},{"location":"#Index-1","page":"InterpolatedPDFs.jl","title":"Index","text":"","category":"section"},{"location":"#","page":"InterpolatedPDFs.jl","title":"InterpolatedPDFs.jl","text":"","category":"page"}]
}
